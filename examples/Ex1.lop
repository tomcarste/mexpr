let id = (x : Type) (y : x) -> y

let idT = type (x : Type) x -> x

let idid = id idT id

let selfapp = ((x : idT -> idT) -> x) (x -> x)

let compose 
    : (A : Type) (B : Type) (C : Type) (B -> C) (A -> B) A -> C 
    = A B C f g x -> f (g x)

// church booleans
let true = (A : Type) (x : A) (y : A) -> x
let false = (A : Type) (x : A) (y : A) -> y
let cond 
    : ((A : Type) A A -> A) (x : Type) x x -> x
    = b -> b

// void type 
let void = type (x : Type) -> x

// inhabited by diverging term
let loop : (x:Type) -> x = x -> loop x

// unit types
let unitT = type []

let unitV = []

//sigma types
let double 
    : (A : Type) (x : A) -> { A; A } 
    = A x -> [x; x] 

let getX 
    : (A : Type) (B : Type) { x : A ; B  } -> A 
    = A B p -> p.x

let fst 
    : (A : Type) (B : A -> Type) {x : A; B x} -> A 
    = A B p -> p.0

let example = double Int 1

let example2 = (getX (type [Int;Int]) (type [Int;Int]) [ x = [1; 2]; [3;4]]).0

let example3 = fst Int ((a : Int) -> Int) [x = 0; 1]

// prelude operations on boolean values

let or 
    : Bool -> Bool -> Bool 
    = b1 b2 -> if b1 True b2

let not 
    : Bool -> Bool 
    = b -> if b False True

let and
    : Bool -> Bool -> Bool 
    = b1 b2 -> if b1 b2 False

let eq_bool 
    : Bool -> Bool -> Bool 
    =  b1 b2 -> if b1 b2 (not b2)  